#ifndef __SYSTEM_PARAM_H
#define __SYSTEM_PARAM_H
#include "stm32f4xx.h"

/****************************************************************************************
											系统运行状态
*****************************************************************************************/
typedef enum sys_state
{
	MODE_MOVE						= 0,				//正常运动模式
	MODE_SETTING				= -1,				//参数设定模式
	MODE_RESET					= -2,				//上电复位开始
	MODE_INITIAL				= -3,				//系统初始化
	MODE_ERR_IN					= -4,				//系统内部错误
	MODE_ERR_COM				= -5,				//系统通信错误
	MODE_ALARM_VOL			= -6,				//系统低压预警
	MODE_ALARM_CUR			= -7,				//系统过流预警
	MODE_ALARM_WATER		= -8				//系统漏水预警	
	
} SysState_Type;


/****************************************************************************************
											运动模式列表
*****************************************************************************************/
typedef enum move_mode
{
	MODE_MANUAL					= 0,			//手动控制运动，无闭环
	MODE_PITCH					= 1,			//俯仰姿态控制
	MODE_DEEP						= 2,			//定深巡航
	MODE_DIR						= 3, 			//定向巡航
	MODE_BOTH						= 4				//定深和定向巡航
} MoveMode_Type;

/****************************************************************************************
											用户输入消息格式
*****************************************************************************************/
typedef struct cmd
{
	u8 type;   				//消息类型
	u8 prio;					//消息优先级
	u8 lng;						//有效数据长度
	s16 data[10];			//有效数据
} Cmd_TypeDef;

/****************************************************************************************
											用户输入
*****************************************************************************************/
typedef struct user_cmd
{
	s16 usercmd_move_x;			//用户输入前进后退方向速度    -100 ~ +100
	s16 usercmd_move_r;			//用户输入左转右转方向速度		-100 ~ +100
	s16 usercmd_move_z;			//用户输入上升下潜方向速度		-100 ~ +100
	
	s16 usercmd_led_1;			//用户输入LED1亮度值					0 ~ 100
	s16 usercmd_led_2;			//用户输入LED2亮度值					0 ~ 100
	
} UserCmd_TypeDef;


/****************************************************************************************
											通信错误列表
*****************************************************************************************/
typedef enum com_err
{
	ERR_SUCCESS					=0,				//执行成功
	ERR_SYNTAX					=-1,			//语法错误
	ERR_PERMISSION			=-2,			//权限错误
	ERR_BUSY						=-3,			//系统忙碌
	ERR_TIMEOUT					=-4				//运行超时
	
} ComErr_Type;



/****************************************************************************************
											操作函数
*****************************************************************************************/

/*  查询/更新系统运行状态  */
void SetSysState(SysState_Type *state);
void GetSysState(SysState_Type *state);

/*  查询/更新运动模式  */
void SetMoveMode(MoveMode_Type *mode);
void GetMoveMode(MoveMode_Type *mode);

/*  查询/更新用户运动速度 */
void SetMoveSpeed(s16 *x, s16 *r, s16 *z);
void GetMoveSpeed(s16 *x, s16 *r, s16 *z);

/*  查询/更新用户灯光亮度 */
void SetLedLight(s16 *d1, s16 *d2);
void GetLedLight(s16 *d1, s16 *d2);



#endif
